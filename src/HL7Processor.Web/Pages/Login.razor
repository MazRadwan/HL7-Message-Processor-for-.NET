@page "/login"
@layout MainLayout
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject IAuthenticationService AuthService

<div class="d-flex justify-content-center align-items-center" style="min-height: 100vh; background-color: #f8f9fa;">
    <div class="card shadow" style="width: 400px;">
        <div class="card-body p-4">
            <div class="text-center mb-4">
                <i class="bi bi-activity text-primary" style="font-size: 3rem;"></i>
                <h2 class="mt-2">HL7 Processor</h2>
                <p class="text-muted">Sign in to your account</p>
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    <i class="bi bi-exclamation-triangle me-2"></i>
                    @errorMessage
                </div>
            }

            <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />
                
                <div class="mb-3">
                    <label for="username" class="form-label">Username</label>
                    <div class="input-group">
                        <span class="input-group-text">
                            <i class="bi bi-person"></i>
                        </span>
                        <InputText @bind-Value="loginModel.Username" class="form-control" id="username" placeholder="Enter username" />
                    </div>
                    <ValidationMessage For="@(() => loginModel.Username)" class="text-danger small" />
                </div>

                <div class="mb-3">
                    <label for="password" class="form-label">Password</label>
                    <div class="input-group">
                        <span class="input-group-text">
                            <i class="bi bi-lock"></i>
                        </span>
                        <InputText @bind-Value="loginModel.Password" type="password" class="form-control" id="password" placeholder="Enter password" />
                    </div>
                    <ValidationMessage For="@(() => loginModel.Password)" class="text-danger small" />
                </div>

                <div class="mb-3 form-check">
                    <InputCheckbox @bind-Value="loginModel.RememberMe" class="form-check-input" id="rememberMe" />
                    <label class="form-check-label" for="rememberMe">
                        Remember me
                    </label>
                </div>

                <button type="submit" class="btn btn-primary w-100" disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                    }
                    else
                    {
                        <i class="bi bi-box-arrow-in-right me-2"></i>
                    }
                    Sign In
                </button>
            </EditForm>

            <div class="text-center mt-3">
                <small class="text-muted">
                    Please enter your credentials to access the HL7 Processor
                </small>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private string errorMessage = string.Empty;
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        // Check if already authenticated
        var token = await JSRuntime.InvokeAsync<string>("localStorageHelper.get", "authToken");
        if (!string.IsNullOrEmpty(token))
        {
            Navigation.NavigateTo("/", true);
        }
    }

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = string.Empty;
        StateHasChanged();

        try
        {
            var result = await AuthService.LoginAsync(loginModel.Username, loginModel.Password);
            
            if (result.Success && !string.IsNullOrEmpty(result.Token))
            {
                // Store token and user info
                await JSRuntime.InvokeVoidAsync("localStorageHelper.set", "authToken", result.Token);
                if (result.User != null)
                {
                    var userJson = System.Text.Json.JsonSerializer.Serialize(result.User);
                    await JSRuntime.InvokeVoidAsync("localStorageHelper.set", "userInfo", userJson);
                }
                
                Navigation.NavigateTo("/", true);
            }
            else
            {
                errorMessage = result.ErrorMessage ?? "Login failed. Please try again.";
            }
        }
        catch (Exception)
        {
            errorMessage = "An error occurred during login. Please try again.";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Username is required")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = string.Empty;

        public bool RememberMe { get; set; }
    }
}